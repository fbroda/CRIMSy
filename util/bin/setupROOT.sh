#!/bin/bash
#
# Leibniz Bioactives Cloud Superuser Setup
# Copyright 2017 Leibniz-Institut f. Pflanzenbiochemie 
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# Perform all the setup steps which require elevated privileges
#
#==========================================================
#
# build pgchem container
#
function buildPgChem {
    pushd "$LBAC_DATASTORE/dist/pgchem" > /dev/null
    docker build --pull -t pgchem .
    popd
}
#
#==========================================================
#
# Install or update crontab settings
#
function installCron {
    TMP_CRONTAB=`mktemp /tmp/crontab.XXXXXX`
    crontab -l > $TMP_CRONTAB

    CRON_MAILTO=0
    grep -q MAILTO $TMP_CRONTAB && CRON_MAILTO=1
    if [ $CRON_MAILTO -eq 0 ] ; then
        editCronMAILTO
    fi

    CRON_LBAC=0
    grep -q "LBAC CRON BEGIN" $TMP_CRONTAB && CRON_LBAC=1
    if [ $CRON_LBAC -eq 0 ] ; then
        # simply append to end
        CRON_ED_CMD='$a'
    else
        # replace block
        CRON_ED_CMD="/LBAC CRON BEGIN/,/LBAC CRON END/c"
    fi
    editCronTab
    cat $TMP_CRONTAB | crontab -u root -
    rm $TMP_CRONTAB
}

#
# Inserts a MAILTO directive
#
function editCronMAILTO {
    ed $TMP_CRONTAB <<EOF
0i
#
MAILTO=""
#
.
w
q
EOF
}

#
# installs or updates the LBAC cron entries
#
function editCronTab {
    ed $TMP_CRONTAB <<EOF
$CRON_ED_CMD
# LBAC CRON BEGIN
# Cron settings for Leibniz Bioactives Cloud
# do not edit unless you know what you're doing
#
#Min Hour Day Month Week Cmd
13 * * * * "$LBAC_DATASTORE/dist/bin/updateCloud.sh" update 2>/dev/null > /dev/null
8 1 * * * "$LBAC_DATASTORE/dist/bin/backup.sh" 2>/dev/null > /dev/null
# LBAC CRON END
.
w
q
EOF

}

#
# Install an additional CLOUD
#
function installCloud {
    pushd $LBAC_DATASTORE/dist/etc/$LBAC_CLOUD > /dev/null

    # add certificate and CRL to proxy (if enabled)
    if [ $LBAC_PROXY_ENABLE2 = 'ON' ] ; then
        $LBAC_DATASTORE/dist/bin/updateCloud.sh cacrl
    fi

    # add certificate to truststore
    docker cp $LBAC_CLOUD.truststore dist_ui_1:/install
    docker cp $LBAC_CLOUD.trustpass dist_ui_1:/install
    docker cp $LBAC_CLOUD.pkcs12 dist_ui_1:/install
    docker cp $LBAC_CLOUD.keypass dist_ui_1:/install
    docker exec dist_ui_1 /usr/local/bin/importKeystores.sh

    # add database records
    docker cp $LBAC_CLOUD.sql dist_db_1:/tmp
    docker exec dist_db_1 /bin/bash -c \
      "cat /tmp/$LBAC_CLOUD.sql | su -c 'psql -Ulbac lbac' postgres && rm /tmp/$LBAC_CLOUD.sql"
}

#
# provides permanent sudo access to unprivileged 
# installation account 
#
function installSudo {
    cat <<EOF > /etc/sudoers.d/lbac
#
# Sudo privilege for Leibniz Bioactives Cloud Managers
# -> allow password less sudo access
#
User_Alias LBAC_MANAGERS = $LBAC_USER
LBAC_MANAGERS ALL=(ALL) NOPASSWD: ALL
EOF
}

#
# Installs Init-Scripts
#
function installSystemd() {
    cp "$LBAC_DATASTORE/dist/etc/lbac.service" /etc/systemd/system
    systemctl daemon-reload
    systemctl enable lbac.service
}

function installSysVInit() {
cat << EOF > /etc/init.d/lbac
#!/bin/bash
#
# SysV init script generated by setup
# Copyright 2017 Leibniz Bioactives Cloud Development Team
#
### BEGIN INIT INFO
# Provides:       lbac
# Required-Start: docker
# Should-Start:   \$network \$syslog
# Required-Stop:  docker
# Should-Stop:    \$network \$syslog
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Short-Description: Leibniz Bioactives Cloud 
# Description:    Run a Leibniz Bioactives Cloud node 
### END INIT INFO
#

case \$1 in 
        start)
                "$LBAC_DATASTORE/dist/bin/lbacInit.sh" start
                ;;
        stop)
                "$LBAC_DATASTORE/dist/bin/lbacInit.sh" stop
                ;;
        *)
                echo "Usage: lbac {start|stop}"
                exit 1
                ;;
esac
EOF
        chmod +x  /etc/init.d/lbac
        insserv /etc/init.d/lbac
}

function installInit {
    case $LBAC_INIT_TYPE in
        SYSTEMD)
            installSystemd
            ;;
        SYSV)
            installSysVInit
            ;;
    esac
}

#
# perform updates for database, scripts, etc.
#
function postInstall {
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" startService db
    echo "Waiting 10 sek. for database to come up ..."
    sleep 10
    docker exec -ti -u postgres dist_db_1 /usr/local/bin/dbupdate.sh
}

#
# remove containers
#
function removeFunc {
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" remove 
    docker rmi pgchem
}

#
# persists installation directory for user root
#
function setInstallDir {
    echo "LBAC_DATASTORE=\"$LBAC_DATASTORE\"" > /root/.lbac
}

#
# set UID for data directories
#
function setPermissions {
    chown 5432 "$LBAC_DATASTORE/data/db"
    chown 80 "$LBAC_DATASTORE/data/htdocs"
    chown 8983 "$LBAC_DATASTORE/data/solr"
    chown 8080 "$LBAC_DATASTORE/data/ui"
}

#
# shutdown
#
function shutdownFunc {
    case $LBAC_INIT_TYPE in
        SYSTEMD)
            systemctl stop lbac.service
            ;;
        SYSV)
            /etc/init.d/lbac stop
            ;;
    esac
}

#
# snapshot
#
function snapshotFunc {
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" stopService proxy 
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" stopService ui
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" startService db
    "$LBAC_DATASTORE/dist/bin/lbacInit.sh" startService solr

    "$LBAC_DATASTORE/dist/bin/backup.sh"
}

#
#
#
function startFunc {
    case $LBAC_INIT_TYPE in
        SYSTEMD)
            systemctl start lbac.service
            ;;
        SYSV)
            /etc/init.d/lbac start
            ;;
    esac
}

# 
#==========================================================
#
function error {
        echo $1
        exit 1
}
# 
#==========================================================
#
test `id -u` -eq 0 || error "This script must be called as root"

if [ "$1" = "initROOT" ] ; then
        LBAC_DATASTORE=$2
        LBAC_USER=$3
        echo "Configuring LBAC_DATASTORE for root account: $LBAC_DATASTORE"
        setInstallDir
        echo "Setting up sudo privilege for user $LBAC_USER"
        installSudo $LBAC_USER
        exit
fi

. /root/.lbac || error "configuration missing: /root/.lbac"
. "$LBAC_DATASTORE/dist/etc/config.sh" || error "configuration missing: LBAC_DATASTORE/dist/etc/config.sh"

case $1 in
    buildPgChem)
        echo "Setting up PGChem"
        buildPgChem
        ;;
    installCron)
        echo "Setting up CRON"
        installCron
        ;;
    installCloud)
        LBAC_CLOUD=$2
        echo "Installing cloud: $LBAC_CLOUD"
        installCloud
        ;;
    installInit)
        echo "Installing Init Script"
        installInit
        ;;
    postInstall)
        echo "Running post-install tasks"
        postInstall
        ;;
    remove)
        echo "Removing existing images"
        removeFunc
        ;;
    setPermissions)
        echo "Setting directory permissions"
        setPermissions
        ;;
    shutdown)
        echo "Shutting down containers"
        shutdownFunc
        ;;
    snapshot)
        echo "Taking snapshot"
        snapshotFunc
        ;;
    start)
        echo "Starting containers"
        startFunc
        ;;
    *)
        error "setupROOT.sh called with invalid arguments"
esac

